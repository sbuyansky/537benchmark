Spencer Buyansky, Ryan Nie

Observations:

  Looking at the data, one can observe that the gap between the time it takes for write() and fwrite() to complete decreases as the bytes per write increases.  Eventually, when the bytes per write gets high enough, it actually takes fwrite() longer to finish than write(). When writing 2 bytes at a time, write() took 105,068,049 micro seconds while fwrite() took 1,763,284 micro seconds. That's 1.5656 micro seconds per write for write() and 0.0263 micro seconds per write for fwrite(). Write() took around 60 times longer to write the same number of bytes. At 1024 bytes at a time, it took write() 2.3177 micro seconds per write and it took fwrite() 0.9980 micro seconds per write. As one can observe, the time per write between write() and fwrite() are getting much closer. By the time it gets to writing 8182 bytes per write, it took write() at total of 125,324 micro seconds while fwrite() took 151,553 micro seconds. By this point, it actually took write less time than fwrite() to complete the writing process and this pattern is repeated in the 65,646 bytes write size. Although the total time it took to complete the write decreased as the write size increased, the fwrite() time decreased by a much smaller factor than write(). For the time per write for the smaller write sizes fwrite() was significantly faster than write() even though the same number of bytes were being written. By the time we get to the higher write sizes however, the time it takes to complete the write are very similar and sometimes it even takes fwrite() longer than write(). 
  
Conclusion:

  One can conclude that the reason why write() is so much slower than fwrite() at smaller write sizes is because fwrite() uses some kind of buffer to store the bytes that will be written instead of making a system call every time it is called. Every time write() is called, it makes a system call which is very time consuming. As a result, as the write size increased, write() got significantly faster because it had to make less system calls to write the same amount of data. fwrite() puts the data into some kind of buffer until the buffer is full and only then does it make a system call. Because of this write() can be making hundreds or even thousands of system calls while fwrite() only makes 1. By the time the write size gets to 8124 bytes this is no longer the case. The time it takes to complete the write for both write() and fwrite() is very similar with fwrite() being even slower at times. This is most likely due to the fact that 8124 bytes is actually greater than the buffer size of fwrite(). As a result, fwrite() would have to make a system call every time it is called because the buffer cannot hold all the data that needs to be written. This makes it no different from write(). fwrite() might even take slightly longer because it has to first check to see if the write size is greater than the buffer size before making the system call instead of just making the system call like write(). 
